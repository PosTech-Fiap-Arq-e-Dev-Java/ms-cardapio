/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fiap.ms.cardapioDomain;

import com.fiap.ms.cardapioDomain.gen.model.AtualizarItemCardapioRequestDto;
import com.fiap.ms.cardapioDomain.gen.model.ItemCardapioDto;
import com.fiap.ms.cardapioDomain.gen.model.MsCardapioV1ItensUsuarioTagsPostRequestDto;
import com.fiap.ms.cardapioDomain.gen.model.NovoItemCardapioDto;
import com.fiap.ms.cardapioDomain.gen.model.TagsCardapioDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-03T22:46:04.803020-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * POST /ms-cardapio/v1/itens : Cria um item de cardápio para um usuário
     *
     * @param novoItemCardapioDto  (required)
     * @return Item criado com sucesso (status code 201)
     */
    @Operation(
        operationId = "msCardapioV1ItensPost",
        summary = "Cria um item de cardápio para um usuário",
        responses = {
            @ApiResponse(responseCode = "201", description = "Item criado com sucesso")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ms-cardapio/v1/itens",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _msCardapioV1ItensPost(
        @Parameter(name = "NovoItemCardapioDto", description = "", required = true) @Valid @RequestBody NovoItemCardapioDto novoItemCardapioDto
    );


    /**
     * DELETE /ms-cardapio/v1/itens/{usuario} : Deleta um item do cardápio pelo usuário e id do item. Opcionalmente, deleta por tag.
     * Deleta um item específico usando &#x60;idItemCardapio&#x60;. Opcionalmente, se &#x60;codigoTag&#x60; for informado, deleta todos os itens do usuário com essa tag. O parâmetro &#x60;idItemCardapio&#x60; é obrigatório. 
     *
     * @param usuario Identificador do usuário dono do cardápio (required)
     * @param idItemCardapio ID do item a ser deletado (required)
     * @param codigoTags Codigo da tag para deletar todos os itens do usuário com essa tag (optional)
     * @return Item(ns) deletado(s) com sucesso (status code 204)
     *         or Requisição inválida (status code 400)
     *         or Item ou tag não encontrado (status code 404)
     */
    @Operation(
        operationId = "msCardapioV1ItensUsuarioDelete",
        summary = "Deleta um item do cardápio pelo usuário e id do item. Opcionalmente, deleta por tag.",
        description = "Deleta um item específico usando `idItemCardapio`. Opcionalmente, se `codigoTag` for informado, deleta todos os itens do usuário com essa tag. O parâmetro `idItemCardapio` é obrigatório. ",
        responses = {
            @ApiResponse(responseCode = "204", description = "Item(ns) deletado(s) com sucesso"),
            @ApiResponse(responseCode = "400", description = "Requisição inválida"),
            @ApiResponse(responseCode = "404", description = "Item ou tag não encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ms-cardapio/v1/itens/{usuario}"
    )
    
    ResponseEntity<Void> _msCardapioV1ItensUsuarioDelete(
        @Parameter(name = "usuario", description = "Identificador do usuário dono do cardápio", required = true, in = ParameterIn.PATH) @PathVariable("usuario") String usuario,
        @NotNull @Parameter(name = "idItemCardapio", description = "ID do item a ser deletado", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "idItemCardapio", required = true) Integer idItemCardapio,
        @Parameter(name = "codigoTags", description = "Codigo da tag para deletar todos os itens do usuário com essa tag", in = ParameterIn.QUERY) @Valid @RequestParam(value = "codigoTags", required = false) String codigoTags
    );


    /**
     * GET /ms-cardapio/v1/itens/{usuario} : Lista todos os itens do usuário ou busca um item específico pelo idItemCardapio e/ou tags
     *
     * @param usuario Identificador do usuário dono do cardápio (required)
     * @param idItemCardapio ID do item para filtrar (opcional) (optional)
     * @return Lista de itens ou item específico (status code 200)
     *         or Item não encontrado (status code 404)
     */
    @Operation(
        operationId = "msCardapioV1ItensUsuarioGet",
        summary = "Lista todos os itens do usuário ou busca um item específico pelo idItemCardapio e/ou tags",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de itens ou item específico", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ItemCardapioDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Item não encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ms-cardapio/v1/itens/{usuario}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ItemCardapioDto>> _msCardapioV1ItensUsuarioGet(
        @Parameter(name = "usuario", description = "Identificador do usuário dono do cardápio", required = true, in = ParameterIn.PATH) @PathVariable("usuario") String usuario,
        @Parameter(name = "idItemCardapio", description = "ID do item para filtrar (opcional)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "idItemCardapio", required = false) Integer idItemCardapio
    );


    /**
     * PUT /ms-cardapio/v1/itens/{usuario} : Atualiza um item do cardápio pelo usuário e id do item
     *
     * @param usuario  (required)
     * @param idItemCardapio ID do item a ser atualizado (required)
     * @param atualizarItemCardapioRequestDto  (required)
     * @return Item atualizado com sucesso (status code 200)
     *         or Item não encontrado (status code 404)
     */
    @Operation(
        operationId = "msCardapioV1ItensUsuarioPut",
        summary = "Atualiza um item do cardápio pelo usuário e id do item",
        responses = {
            @ApiResponse(responseCode = "200", description = "Item atualizado com sucesso"),
            @ApiResponse(responseCode = "404", description = "Item não encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ms-cardapio/v1/itens/{usuario}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _msCardapioV1ItensUsuarioPut(
        @Parameter(name = "usuario", description = "", required = true, in = ParameterIn.PATH) @PathVariable("usuario") String usuario,
        @NotNull @Parameter(name = "idItemCardapio", description = "ID do item a ser atualizado", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "idItemCardapio", required = true) Integer idItemCardapio,
        @Parameter(name = "AtualizarItemCardapioRequestDto", description = "", required = true) @Valid @RequestBody AtualizarItemCardapioRequestDto atualizarItemCardapioRequestDto
    );


    /**
     * POST /ms-cardapio/v1/itens/{usuario}/tags : Adiciona uma tag a um item do cardápio
     *
     * @param usuario Identificador do usuário dono do cardápio (required)
     * @param idItemCardapio ID do item ao qual será adicionada a tag (required)
     * @param msCardapioV1ItensUsuarioTagsPostRequestDto  (required)
     * @return Tag adicionada com sucesso (status code 200)
     *         or Requisição inválida (status code 400)
     *         or Item ou tag não encontrado (status code 404)
     */
    @Operation(
        operationId = "msCardapioV1ItensUsuarioTagsPost",
        summary = "Adiciona uma tag a um item do cardápio",
        responses = {
            @ApiResponse(responseCode = "200", description = "Tag adicionada com sucesso"),
            @ApiResponse(responseCode = "400", description = "Requisição inválida"),
            @ApiResponse(responseCode = "404", description = "Item ou tag não encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ms-cardapio/v1/itens/{usuario}/tags",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _msCardapioV1ItensUsuarioTagsPost(
        @Parameter(name = "usuario", description = "Identificador do usuário dono do cardápio", required = true, in = ParameterIn.PATH) @PathVariable("usuario") String usuario,
        @NotNull @Parameter(name = "idItemCardapio", description = "ID do item ao qual será adicionada a tag", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "idItemCardapio", required = true) Integer idItemCardapio,
        @Parameter(name = "MsCardapioV1ItensUsuarioTagsPostRequestDto", description = "", required = true) @Valid @RequestBody MsCardapioV1ItensUsuarioTagsPostRequestDto msCardapioV1ItensUsuarioTagsPostRequestDto
    );


    /**
     * GET /ms-cardapio/v1/tags : Lista todas as tags de itens do cardápio
     *
     * @return Lista de tags disponíveis (status code 200)
     */
    @Operation(
        operationId = "msCardapioV1TagsGet",
        summary = "Lista todas as tags de itens do cardápio",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de tags disponíveis", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TagsCardapioDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ms-cardapio/v1/tags",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<TagsCardapioDto>> _msCardapioV1TagsGet(
        
    );

}
